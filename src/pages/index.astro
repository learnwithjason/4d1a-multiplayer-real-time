---

---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<section id="hero">
			<span class="connection-count">1</span>

			<button id="collab"> 0%</button>
		</section>

		<pre id="debug"></pre>
	</body>
</html>

<script>
	import PartySocket from 'partysocket';

	const partySocket = new PartySocket({
		host: import.meta.env.PUBLIC_PARTYKIT_URL,
		room: '4d1a',
	});

	const btn = document.getElementById('collab')!;
	const debug = document.getElementById('debug')!;

	const MAX_AMOUNT_PER_PERSON = 25;
	const INTERVAL_SIZE = 5_000 / MAX_AMOUNT_PER_PERSON;

	let holding: number;
	let localAmount: number = 0;

	btn.style.setProperty('--speed', `${INTERVAL_SIZE - 10}ms`);

	function getAmountWithinBounds(amount: number) {
		return Math.max(Math.min(amount, MAX_AMOUNT_PER_PERSON), 0);
	}

	function updatePropertyPct(amount: number) {
		clearInterval(holding);

		const interval = amount > 0 ? INTERVAL_SIZE : INTERVAL_SIZE * 2;

		holding = setInterval(() => {
			localAmount = getAmountWithinBounds(localAmount + amount);

			if (
				(localAmount === 0 && amount === -1) ||
				(localAmount === MAX_AMOUNT_PER_PERSON && amount === 1)
			) {
				clearInterval(holding);
			}

			// tell other connected clients to update their own amounts
			partySocket.send(
				JSON.stringify({
					type: 'unlock',
					amount,
				}),
			);
		}, interval);
	}

	btn.addEventListener('mousedown', () => {
		updatePropertyPct(1);
	});

	btn.addEventListener('touchstart', (e) => {
		e.preventDefault();
		updatePropertyPct(1);
	});

	btn.addEventListener('mouseup', (e) => {
		updatePropertyPct(-1);
	});

	btn.addEventListener('touchend', (e) => {
		e.preventDefault();
		updatePropertyPct(-1);
	});

	partySocket.addEventListener('message', (e) => {
		const counter = document.querySelector('.connection-count') as HTMLElement;
		const msg = JSON.parse(e.data);

		debug.innerText = JSON.stringify(msg, null, 2);

		if (msg.type === 'unlock') {
			let percent = 0;
			for (const [_, pct] of msg.unlocks) {
				percent += pct;
			}

			btn.style.setProperty('--pct', `${percent}%`);
			btn.innerText = `${percent}%`;
		}

		if (msg.count) {
			counter.innerText = msg.count;
		}
	});
</script>

<style is:global>
	:root {
		--color-mix-percent: 0%;
		--color-background: oklch(95.76% 0.0051 192.71);
		--color-border: oklch(21.58% 0.037 192.71);
		--color-calm: oklch(95.29% 0.074 192.71);
		--color-energy: oklch(74.12% 0.195 22.24);
	}

	* {
		box-sizing: border-box;
	}

	html {
		font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,
			Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji',
			'Segoe UI Symbol';
	}

	body {
		margin: 0;
	}
</style>

<style>
	@property --pct {
		inherits: true;
		initial-value: 0%;
		syntax: '<percentage>';
	}

	@property --speed {
		inherits: true;
		initial-value: 200ms;
		syntax: '<time>';
	}

	#hero {
		display: grid;
		gap: 1rem;
		grid-template-columns: repeat(auto-fit, 3rem);
		place-content: center;
		background: var(--color-background);
		height: 80dvh;
		position: relative;
	}

	.connection-count {
		position: absolute;
		inset-block-start: 1rem;
		inset-inline-end: 1rem;
	}

	#collab {
		aspect-ratio: 1;
		background:
			linear-gradient(to bottom in oklch, oklch(0.9 0.025 0) 0 0) padding-box,
			conic-gradient(
					from 0deg in oklch,
					oklch(0.85 0.37 0) 0%,
					oklch(0.85 0.37 50) var(--pct),
					oklch(0.85 0.37 50 / 0) var(--pct)
				)
				border-box;
		border: 0.5rem solid transparent;
		border-radius: 50%;
		margin-block: auto;
		transition: --pct var(--speed) linear;
		width: 100px;
	}
</style>
